<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search</title>
</head>

<body>
    <style>
        * {
            outline: none;
        }

        html,
        body {
            height: 100%;
            min-height: 100%;
        }

        body {
            margin: 0;
            background-color: #161B23;
        }

        .tb {
            display: table;
            width: 100%;
        }

        .td {
            display: table-cell;
            vertical-align: middle;
        }

        .fade-in {
            animation: fadeIn ease 3s;
            -webkit-animation: fadeIn ease 3s;
            -moz-animation: fadeIn ease 3s;
            -o-animation: fadeIn ease 3s;
            -ms-animation: fadeIn ease 3s;
            color: #EEEFEF;
        }

        .text {
            margin: 0;
            position: absolute;
            top: 40%;
            left: 50%;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            width: 50%;
            padding: 70px 0;
            text-align: center;
        }

        .search {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            width: 50%;
            padding: 70px 0;
            text-align: center;
        }

        @keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        @-moz-keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        @-o-keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        @-ms-keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }




        * {
            box-sizing: border-box;
        }

        body {
            font: 16px Arial;
        }

        .autocomplete {
            /*the container must be positioned relative:*/
            position: relative;
            display: inline-block;
        }

        input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 10px;
            font-size: 16px;
        }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: rgb(41, 128, 185);
            color: #fff;
            cursor: pointer;
        }

        .random_button {
            background-color: rgb(41, 128, 185);
            color: #fff;
            border: 1px solid transparent;
            padding: 10px;
            font-size: 16px;
        }


        .random_button {
            margin: 0;
            position: absolute;
            top: 90%;
            left: 50%;
            cursor: pointer;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            text-align: center;
        }


        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }


        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

        .autocomplete-items div:hover {
            /*when hovering an item:*/
            background-color: #e9e9e9;
        }

        #error {
            margin: 0;
            position: absolute;
            top: 45%;
            left: 50%;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            width: 50%;
            color: #EEEFEF;
            padding: 70px 0;
            text-align: center;

        }

        .autocomplete-active {
            background-color: rgb(41, 128, 185) !important;
            color: #ffffff;
        }

        .topnav {
            overflow: hidden;
            background-color: rgb(44, 62, 80);
        }


        .topnav a {
            float: left;
            display: block;
            color: black;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
            font-size: 17px;
        }

        .topnav a:hover {
            background-color: #ddd;
            color: black;
        }

        .topnav a.active {
            background-color: rgb(41, 128, 185);
            color: white;
        }

        .topnav input[type=text] {
            float: right;
            padding: 6px;
            border: none;
            margin-top: 8px;
            margin-right: 16px;
            font-size: 17px;
        }

        @media screen and (max-width: 600px) {

            .topnav a,
            .topnav input[type=text] {
                float: none;
                display: block;
                text-align: left;
                width: 100%;
                margin: 0;
                padding: 14px;
            }

            .topnav input[type=text] {
                border: 1px solid #ccc;
            }
        }
    </style>

    <div class="topnav">
        <a class="active" href="/">Home</a>
        <a href="/screener">Screener</a>
    </div>


    <h1 class="fade-in text">What Stock are you Interested in?</h1>
    <h3 id="error" class="fade-in"></h3>
    <form autocomplete="off" class="search" onsubmit="search()">
        <div class="autocomplete" style="width:600px;">
            <input id="myInput" type="text" name="stock" placeholder="Ticker">
        </div>
        <input type="submit">
        <button type="button" class="random_button" onclick="randomStock()">I'm Feeling Lucky</button>
    </form>
</body>
<script>

    var stocks = ["AMZN",
        "TSLA",
        "BABA",
        "AAPL",
        "GOOGL",
        "MA",
        "DIS",
        "INTC",
        "NFLX",
        "NVDA",
        "PINS",
        "GME",
        "MSFT",
        "JPM",
        "NKE",
        "SPOT",
        "PLTR",
        "ADBE",
        "PYPL",
        "ROKU",
        "QCOM",
        "WMT",
        "PFE",
        "XOM",
        "KO",
        "VZ",
        "ORCL",
        "JNJ",
        "BAC",
        "TGT",
        "MCD",
        "PEP",
        "EA",
        "COF",
        "TWTR",
        "CAT",
        "ABT",
        "CRM",
        "WFC",
        "NEE",
        "RTX",
        "TMUS",
        "HON",
        "ADI",
        "PG",
        "F",
        "EBAY",
        "UPST",
        "SHOP",
        "UNP",
        "MMM",
        "HD",
        "DAL",
        "V"]


    function search() {
        var search = document.getElementById("myInput").value;
        console.log(search)
        if (stocks.includes(search.toUpperCase())) {
            window.open("http://localhost:5000/stock/" + search.toUpperCase());
        }
    }

    function randomStock() {
        var stock = stocks[Math.floor(Math.random() * stocks.length)];
        window.open("http://localhost:5000/stock/" + stock);
    }



    function autocomplete(inp, arr) {
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const stock = urlParams.get('stock')
        if (stock) {
            if (!(stocks.includes(stock.toUpperCase()))) {
                x = document.getElementById("error");
                x.innerText = "Stock " + stock.toUpperCase() + " is not available!"
                console.log("No such stock")
            }

        }
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    autocomplete(document.getElementById("myInput"), stocks);

</script>

</html>